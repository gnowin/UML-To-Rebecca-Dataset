Could you translate this PlantUML diagram to Rebeca (Reactive Objects Language) code?

Input:
@startuml

hide empty description

state Philosopher{

State P_A : !eat
State P_A : !fL
State P_A : !fR

State P_B : !eat
State P_B : fL
State P_B : !fR

State P_C : !eat
State P_C : fL
State P_C : fR

State P_D : eat
State P_D : fL
State P_D : fR

[*] -> P_A

P_A -> P_B : permit() {sender == forkL \n forkR.request}

P_B -> P_C : permit() {self.eat}

P_C -> P_D : eat() {self.leave}

P_D -> P_A : leave() {forkL.release() \n forkR.release() \n self.arrive()}

}

state Fork{

State F_A : !LA
State F_A : !RA
State F_A : !LR
State F_A : !RR

State F_B : LA
State F_B : !RA
State F_B : LR
State F_B : !RR

State F_C : LA
State F_C : !RA

State F_C : LR
State F_C : RR

State F_D : !LA
State F_D : RA
State F_D : LR
State F_D : RR

State F_E : !LA
State F_E : RA
State F_E : !LR
State F_E : RR

[*] -> F_A

F_A --> F_B : request() \n {sender == philL \n philL.permit()}

F_A --> F_E : request() \n {philR.permit()}

F_B --> F_C : request() \n {philR.permit()}

F_C --> F_E : release() \n {sender == philL && lAssign \n philR.permit()}

F_E --> F_D : request() \n {philL.permit()}

F_D --> F_B : release() \n {sender == philR && rAssign \n philL.permit()}

}

@enduml 

Output:


reactiveclass Philosopher(3)
{
	knownrebecs
	{
		Fork forkL;
		Fork forkR;
	}
	statevars
	{
		boolean eating;
		boolean fL;
		boolean fR;
	}
	Philosopher()
	{
		fL = false;
		fR = false;
		eating = false;
		self.arrive();
	}

	msgsrv arrive()
	{
		forkL.request();
	}

	msgsrv permit()
	{
		if (sender == forkL) {
			if (!fL) {
				fL = true;
				forkR.request();
			}
		}
		else {
			if (fL && !(fR)) {
				fR = true;
				self.eat();
			}
		}
	}

	msgsrv eat()
	{
		eating = true;
		self.leave();
	}

	msgsrv leave()
	{
		fL = false;
		fR = false;
		eating = false;
		forkL.release();
		forkR.release();
		self.arrive();
	}
}

reactiveclass Fork(3)
{
	knownrebecs
	{
		Philosopher philL;
		Philosopher philR;
	}
	statevars
	{
		boolean lAssign;	
		boolean rAssign;	
		boolean leftReq;
		boolean rightReq;
	}
	Fork()
	{ 
		lAssign = false;
		rAssign = false;
		leftReq = false;
		rightReq = false;
	}

	msgsrv request()
	{
		if (sender == philL) {
			if (!leftReq) {
				leftReq = true;
				if (!rAssign) {
					lAssign = true;
					philL.permit();
				}
			} 
		}
		else {
			if (!rightReq) {
				rightReq = true;
				if (!lAssign) {
					rAssign = true;
					philR.permit();
				}
			}
		}
	}
	msgsrv release()
	{
		if (sender == philL && lAssign){
			leftReq = false;
			lAssign = false;
			if (rightReq) {
				rAssign=true;
				philR.permit();
			}
		}
		if (sender == philR && rAssign){
			rAssign = false;
			rightReq = false;
			if (leftReq) {
				lAssign=true;
				philL.permit();
			}
		}
	}
}

main
{
       Philosopher phil0(fork0, fork2):();
       Philosopher phil1(fork0, fork1):();
       Philosopher phil2(fork1, fork2):();

       Fork fork0(phil0, phil1):();
       Fork fork1(phil1, phil2):();
       Fork fork2(phil2, phil0):();
}

Could you translate this PlantUML diagram to Rebeca (Reactive Objects Language) code?

Input:

Output: 

Could you translate this PlantUML diagram to Rebeca (Reactive Objects Language) code?

Input:

Output: 

Could you translate this PlantUML diagram to Rebeca (Reactive Objects Language) code?

Input:

Output: 

Could you translate this PlantUML diagram to Rebeca (Reactive Objects Language) code?

Input:

Output: 

Could you translate this PlantUML diagram to Rebeca (Reactive Objects Language) code?

Input:

Output: 
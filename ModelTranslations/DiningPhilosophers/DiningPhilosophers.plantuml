@startuml

hide empty description

state Philosopher{

State P_A : !eat
State P_A : !fL
State P_A : !fR

State P_B : !eat
State P_B : fL
State P_B : !fR

State P_C : !eat
State P_C : fL
State P_C : fR

State P_D : eat
State P_D : fL
State P_D : fR

[*] -> P_A

P_A -> P_B : permit() {sender == forkL \n forkR.request}

P_B -> P_C : permit() {self.eat}

P_C -> P_D : eat() {self.leave}

P_D -> P_A : leave() {forkL.release() \n forkR.release() \n self.arrive()}

}

state Fork{

State F_A : !LA
State F_A : !RA
State F_A : !LR
State F_A : !RR

State F_B : LA
State F_B : !RA
State F_B : LR
State F_B : !RR

State F_C : LA
State F_C : !RA

State F_C : LR
State F_C : RR

State F_D : !LA
State F_D : RA
State F_D : LR
State F_D : RR

State F_E : !LA
State F_E : RA
State F_E : !LR
State F_E : RR

[*] -> F_A

F_A --> F_B : request() \n {sender == philL \n philL.permit()}

F_A --> F_E : request() \n {philR.permit()}

F_B --> F_C : request() \n {philR.permit()}

F_C --> F_E : release() \n {sender == philL && lAssign \n philR.permit()}

F_E --> F_D : request() \n {philL.permit()}

F_D --> F_B : release() \n {sender == philR && rAssign \n philL.permit()}

}

@enduml 
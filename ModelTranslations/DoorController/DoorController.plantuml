@startuml
hide empty description

state Train{
state T_1 : !trainStatus
state T_1 : !isRunning

state T_2 : trainStatus
state T_2 : !isRunning

state T_3 : trainStatus
state T_3 : isRunning

T_1 -> T_2 : LeaveStation()after(t2), trainStatus=true, isRunning=false
T_2 -> T_3 : trainStatus=false, running()after(t1), isRunning=true
T_3 -> T_1 : approachStation()after(t1), trainStatus=false, isRunning=false
}

state Door{
state D_1 : Locked
state D_1 : Closed

state D_2 : Unlocked
state D_2 : Closed

state D_3 : Unlocked
state D_3 : Opened

D_1 -> D_2 : unlockDoor()
D_2 -> D_1 : lockDoor()
D_2 -> D_3 : OpenDoor()
D_3 -> D_2 : closeDoor()
}

state Controller{
state C_1 : trainStatus
state C_1 : isRunning
state C_1 : Locked
state C_1 : Closed

state C_2 : !trainStatus
state C_2 : !isRunning
state C_2 : Locked
state C_2 : Closed

state C_3 : !trainStatus
state C_3 : !isRunning
state C_3 : Unlocked
state C_3 : Closed

state C_4 : !trainStatus
state C_4 : !isRunning
state C_4 : Unlocked
state C_4 : Opened

state C_5 : trainStatus
state C_5 : !isRunning
state C_5 : Unlocked
state C_5 : Opened

state C_6 : trainStatus
state C_6 : !isRunning
state C_6 : Unlocked
state C_6 : Closed

state C_7 : trainStatus
state C_7 : !isRunning
state C_7 : Locked
state C_7 : Closed

C_1 -> C_2 : train.approachStation()after(t1)
C_2 -> C_3 : door.unlockDoor()
C_3 -> C_4 : door.openDoor()
C_4 -> C_5 : train.leaveStation()after(t2)
C_5 -> C_6 : door.closeDoor()
C_6 -> C_7 : door.lockDoor()
C_7 -> C_1 : train.running()after(t1)
}

state Passanger{
state P : P
P -> P : passengerOpenDoor()
}
@enduml
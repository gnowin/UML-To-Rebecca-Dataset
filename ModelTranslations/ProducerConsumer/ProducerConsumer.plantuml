@startuml

hide empty description

state BufferManager {
    state B_A : empty
    state B_A : !full
    state B_A : !producerWaiting
    state B_A : !consumerWaiting

    state B_B : empty
    state B_B : !full
    state B_B : !producerWaiting
    state B_B : consumerWaiting

    state B_C : !empty
    state B_C : !full
    state B_C : !producerWaiting
    state B_C : !consumerWaiting

    state B_D : !empty
    state B_D : full
    state B_D : !producerWaiting
    state B_D : !consumerWaiting

    state B_E : !empty
    state B_E : full
    state B_E : producerWaiting
    state B_E : !consumerWaiting

    
    [*] -> B_A

    B_A -> B_A : giveMeNextProduce() \n {producer.produce(nextProduce)}

    B_A --> B_B : giveMeNextConsume() \n {}
    B_B --> B_A : ackProduce() \n {consumer.consume(nextConsume)}
   
    B_B -> B_B : giveMeNextProduce() \n {producer.produce(nextProduce)}

    B_A --> B_C : ackProduce() \n {nextProduce = (nextProduce + 1) % bufferlength}
    B_C --> B_A : ackConsume() \n {nextConsume = (nextConsume + 1) % bufferlenght \n nextConsume == nextProduce}

    B_C -> B_C : giveMeNextProduce() \n {producer.produce(nextProduce)}
    B_C -> B_C : giveMeNextConsume() \n {consumer.consume(nextConsume)}

    B_C --> B_D : ackProduce() \n {nextProduce = (nextProduce + 1) % bufferlength \n nextProduce == nextConsume}
    B_D --> B_C : ackConsume() \n {nextConsume = (nextConsume + 1) % bufferlenght \n producer.produce(nextProduce)}

    B_D --> B_E : giveMeNextProduce() \n {}
    B_E --> B_C : ackConsume() \n {nextConsume = (nextConsume + 1) % bufferlenght \n producer.produce(nextProduce)}
}

state Producer{

    state P_A

    [*] -> P_A : {self.beginProduce()}
    P_A -> P_A : produce(int bufNum) \n {buffer.ackProduce() \n self.beginProduce()}
    P_A -> P_A : beginProduce() \n {buffer.giveMeNextProduce()}
}

state Consumer{
    state C_A

    [*] -> C_A : {self.beginConsume()}
    C_A -> C_A : consume(int bufNum) \n {buffer.ackConsume() \n self.beginConsume()}
    C_A -> C_A : beginConsume() \n {buffer.giveMeNextConsume()}
}

@enduml
reactiveclass Sensor(2) {
	knownrebecs { Controller ctrl; }
	statevars { byte period, id; }
	
	Sensor(byte myId, byte myPeriod) {
		period = myPeriod;
		id = myId;
		self.doReport();
	}
	msgsrv doReport() {
		ctrl.report(id, ?(0,1)) after(1);
		self.doReport() after(period);
	}
}

reactiveclass Controller(4) {

	knownrebecs {
	Scientist scientist;
	Rescue rescue;
	}
	
	statevars {
		byte[2] sensorValues;
		boolean sciAck, sciRescued, sciDead;
		int ctrlCheckPeriod, scientistDeadline, rescueDeadline;
	}
	
	Controller() {
	sciDead = false;
	sciAck = false;
	sciDead = false;
	scientistDeadline = 5;
	rescueDeadline = 4;
	ctrlCheckPeriod = 15;
	self.checkSensors();
	}
	
	msgsrv report(byte id, byte value) {
		sensorValues[id] = value;
	}
	
	msgsrv checkSensors() {
		boolean dangerousConditionIsDetected = false;
		
		for(int i = 0; i < 2; i++) {
			if(sensorValues[i] != 0) {
				scientist.abortPlan() after(1);
				self.checkSciAck() after(scientistDeadline);
				dangerousConditionIsDetected = true;
			break; 
			}
		}
		
		if(!dangerousConditionIsDetected)
			self.checkSensors() after(ctrlCheckPeriod);	
	}
	msgsrv ack() {
		sciAck = true;
	}
	msgsrv checkSciAck() {
		if (!sciAck) {
			sciRescued = false;
			rescue.go() after(1);
			self.checkRescue() after(rescueDeadline);
		}
		sciAck = false;
	}
	msgsrv rescueReached() {
		sciRescued = true;
	}
	msgsrv checkRescue() {
		if (!sciRescued)
			sciDead = true;
		}
}

reactiveclass Scientist(3) {
	msgsrv abortPlan() {
		if(?(true, false))
		((Controller)sender).ack() after(1);
	}
}

reactiveclass Rescue(3) {
	msgsrv go() {
		delay(1);
	((Controller)sender).rescueReached() after(1);
	}
}


main {
	Sensor sensor0(ctrl):(0, 10);
	Sensor sensor1(ctrl):(1, 9);
	Scientist scientist():();
	Rescue rescue():();
	Controller ctrl(scientist, rescue):();
}
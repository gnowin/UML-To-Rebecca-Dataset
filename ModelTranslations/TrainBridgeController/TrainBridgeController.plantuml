@startuml

hide empty description


state Train{

T_A : !onTheBridge

T_B : onTheBridge

[*] -> T_A : {self.Passed()}

T_A -> T_A : ReachBridge() \n {controller.Arrive()}
T_A --> T_B : YouMayPass() \n {self.Passed()}

T_B --> T_A : Passed() \n {controller.Leave() \n self.ReachBridge()}

}

state Controller{

State C_A : !isOnBridge1
State C_A : !isOnBridge2
State C_A : !isWaiting1
State C_A : !isWaiting2

State C_B : isOnBridge1
State C_B : !isOnBridge2
State C_B : !isWaiting1
State C_B : !isWaiting2

State C_C : !isOnBridge1
State C_C : isOnBridge2
State C_C : !isWaiting1
State C_C : !isWaiting2
State C_D : isOnBridge1
State C_D : !isOnBridge2
State C_D : !isWaiting1
State C_D : isWaiting2
State C_E : !isOnBridge1
State C_E : isOnBridge2
State C_E : isWaiting1
State C_E : !isWaiting2

[*] -> C_A

C_A --> C_B : Arrive() \n {sender == (Train t1) \n (Train t1).YouMayPass()}

C_A --> C_C : Arrive() \n {sender != (Train t1) \n (Train t2).YouMayPass()}

C_B --> C_D : Arrive() \n {sender != (Train t1) \n isWaiting2 = true}

C_C --> C_E : Arrive() \n {sender == (Train t1) \n isWaiting1 = true}

C_D --> C_C : Leave() \n {sender == (Train t1) \n (Train t2).YouMayPass()}

C_E --> C_B : Leave \n {sender != (Train t1) \n (Train t1).YouMayPass()}

}

@enduml 
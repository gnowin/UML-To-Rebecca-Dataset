reactiveclass t1(5)
{
    state boolean onTheBridge = false;

    msgsrv Passed() {
        if (!onTheBridge) {
            self.ReachBridge();
        }
    }

    msgsrv ReachBridge() {
        main.controller!Arrive(self);
    }

    msgsrv YouMayPass() {
        onTheBridge = true;
        main.controller!Leave(self);
        self.ReachBridge();
    }
}

reactiveclass t2(5)
{
    state boolean onTheBridge = false;

    msgsrv Passed() {
        if (!onTheBridge) {
            self.ReachBridge();
        }
    }

    msgsrv ReachBridge() {
        main.controller!Arrive(self);
    }

    msgsrv YouMayPass() {
        onTheBridge = true;
        main.controller!Leave(self);
        self.ReachBridge();
    }
}

reactiveclass Controller(10)
{
    state boolean isOnBridge1 = false;
    state boolean isOnBridge2 = false;
    state boolean isWaiting1 = false;
    state boolean isWaiting2 = false;

    msgsrv Arrive(t1_t2 sender) {
        if (sender == main.t1 && !isOnBridge1 && !isOnBridge2) {
            isOnBridge1 = true;
            main.t1!YouMayPass();
        } else if (sender == main.t2 && !isOnBridge1 && !isOnBridge2) {
            isOnBridge2 = true;
            main.t2!YouMayPass();
        } else if (sender == main.t2 && isOnBridge1 && !isOnBridge2) {
            isWaiting2 = true;
        } else if (sender == main.t1 && !isOnBridge1 && isOnBridge2) {
            isWaiting1 = true;
        }
    }

    msgsrv Leave(t1_t2 sender) {
        if (sender == main.t1 && isOnBridge1) {
            isOnBridge1 = false;
            if (isWaiting2) {
                isOnBridge2 = true;
                isWaiting2 = false;
                main.t2!YouMayPass();
            }
        } else if (sender == main.t2 && isOnBridge2) {
            isOnBridge2 = false;
            if (isWaiting1) {
                isOnBridge1 = true;
                isWaiting1 = false;
                main.t1!YouMayPass();
            }
        }
    }
}

main
{
    t1 t1():{};
    t2 t2():{};
    Controller controller():{};
}
